import { DisplayObject } from '@pixi/display';
import { Group } from '@pixi/layers';
import { IMeshMaterialOptions } from '@pixi/mesh';
import { Layer } from '@pixi/layers';
import { Mesh } from '@pixi/mesh';
import { MeshMaterial } from '@pixi/mesh';
import { Point } from '@pixi/math';
import { Program } from '@pixi/core';
import { Quad } from '@pixi/core';
import { Rectangle } from '@pixi/math';
import { Renderer } from '@pixi/core';
import { Texture } from '@pixi/core';

export declare class AmbientLight extends Light {
    constructor(color?: number, brightness?: number);
}

export declare class AmbientLightShader extends LightShader {
    constructor();
    static _program: Program;
}

export declare const diffuseGroup: Group;

export declare class DirectionalLight extends Light {
    target: DisplayObject | Point;
    constructor(color: number, brightness: number, target: DisplayObject | Point);
    syncShader(renderer: Renderer): void;
}

export declare class DirectionalLightShader extends LightShader {
    constructor();
    static _program: Program;
}

export declare class LayerFinder {
    lastLayer: Layer;
    diffuseTexture: Texture;
    normalTexture: Texture;
    check(layer: Layer): void;
    static _instance: LayerFinder;
}

export declare class Light extends Mesh {
    lightHeight: number;
    brightness: number;
    shaderName: string;
    readonly useViewportQuad: boolean;
    constructor(color: number, brightness: number, material: LightShader, vertices?: Float32Array, indices?: Uint16Array);
    get color(): number;
    set color(val: number);
    get falloff(): ArrayLike<number>;
    set falloff(value: ArrayLike<number>);
    lastLayer: Layer;
    syncShader(renderer: Renderer): void;
    _renderDefault(renderer: Renderer): void;
}

export declare const lightGroup: Group;

export declare class LightShader extends MeshMaterial {
    constructor(options?: IMeshMaterialOptions);
    static defaultVertexSrc: string;
}

export declare const normalGroup: Group;

export declare class PointLight extends Light {
    constructor(color?: number, brightness?: number, radius?: number);
    get radius(): number;
    set radius(value: number);
}

export declare class PointLightShader extends LightShader {
    constructor();
    static _program: Program;
}

export declare class ViewportQuad extends Quad {
    update(viewport: Rectangle): void;
    static _instance: ViewportQuad;
}

export { }
